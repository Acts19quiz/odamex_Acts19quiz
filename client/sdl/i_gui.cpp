// Emacs style mode select   -*- C++ -*-
//-----------------------------------------------------------------------------
//
// $Id$
//
// Copyright (C) 2006-2020 by The Odamex Team.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// DESCRIPTION:
//
// GUI Abstraction to SDL.
//
//-----------------------------------------------------------------------------

#include "i_gui.h"

#include <stdio.h>
#include <string.h>

#include "i_video.h"
#include "v_pnm.h"

#define ODAFONT_WIDTH 8
#define ODAFONT_HEIGHT 8

//
// Odamex console font as a raw PBM image.
//
// This was just saved from GIMP and turned into a C array with xxd.
// 
static const uint8_t ODAFONT_pbm[] = {
	0x50, 0x34, 0x0a, 0x23, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x62, 0x79, 0x20, 0x47, 0x49, 0x4d, 0x50, 0x20, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x31, 0x30, 0x2e, 0x32, 0x30,
	0x20, 0x50, 0x4e, 0x4d, 0x20, 0x70, 0x6c, 0x75, 0x67, 0x2d, 0x69, 0x6e,
	0x0a, 0x31, 0x32, 0x38, 0x20, 0x34, 0x38, 0x0a, 0x00, 0x20, 0x28, 0x24,
	0x10, 0xc2, 0x20, 0x10, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x20, 0x28, 0x7e, 0x3c, 0xc4, 0x50, 0x10, 0x10, 0x08, 0x28, 0x00,
	0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x24, 0x50, 0x08, 0x20, 0x00,
	0x10, 0x08, 0x10, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x24,
	0x38, 0x10, 0x54, 0x00, 0x10, 0x08, 0x7c, 0x10, 0x60, 0x00, 0x00, 0x08,
	0x00, 0x20, 0x00, 0x24, 0x14, 0x20, 0x48, 0x00, 0x10, 0x08, 0x10, 0x7c,
	0x60, 0x3c, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7e, 0x78, 0x46, 0x48, 0x00,
	0x10, 0x08, 0x28, 0x10, 0x20, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x24,
	0x10, 0x86, 0x34, 0x00, 0x08, 0x10, 0x00, 0x10, 0x40, 0x00, 0x40, 0x40,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x30, 0x08, 0x30, 0x30, 0x08, 0x78, 0x38, 0x78,
	0x30, 0x30, 0x00, 0x00, 0x08, 0x00, 0x10, 0x30, 0x48, 0x18, 0x48, 0x48,
	0x18, 0x40, 0x40, 0x08, 0x48, 0x48, 0x10, 0x10, 0x10, 0x00, 0x08, 0x48,
	0x48, 0x08, 0x08, 0x10, 0x28, 0x70, 0x70, 0x10, 0x30, 0x38, 0x00, 0x00,
	0x20, 0x00, 0x04, 0x08, 0x48, 0x08, 0x30, 0x08, 0x48, 0x08, 0x48, 0x10,
	0x48, 0x08, 0x00, 0x10, 0x40, 0x3c, 0x02, 0x10, 0x48, 0x08, 0x40, 0x48,
	0x7c, 0x48, 0x48, 0x20, 0x48, 0x48, 0x10, 0x10, 0x20, 0x00, 0x04, 0x20,
	0x30, 0x08, 0x78, 0x30, 0x08, 0x30, 0x30, 0x20, 0x30, 0x30, 0x00, 0x20,
	0x10, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x38, 0x70, 0xf0, 0x70, 0xf0, 0xf8, 0xf8, 0x70, 0x88, 0x38, 0x08, 0x88,
	0x80, 0x88, 0x88, 0x70, 0x44, 0x88, 0x88, 0x88, 0x88, 0x80, 0x80, 0x88,
	0x88, 0x10, 0x08, 0x90, 0x80, 0xd8, 0xc8, 0x88, 0x92, 0x88, 0xf0, 0x80,
	0x88, 0xf0, 0xf0, 0x80, 0xf8, 0x10, 0x08, 0xa0, 0x80, 0xa8, 0xa8, 0x88,
	0xaa, 0xf8, 0x88, 0x80, 0x88, 0x80, 0x80, 0xb8, 0x88, 0x10, 0x88, 0xc0,
	0x80, 0x88, 0x98, 0x88, 0x9c, 0x88, 0x88, 0x88, 0x88, 0x80, 0x80, 0x88,
	0x88, 0x10, 0x88, 0xa0, 0x80, 0x88, 0x88, 0x88, 0x40, 0x88, 0xf0, 0x70,
	0xf0, 0xf8, 0x80, 0x78, 0x88, 0x38, 0x78, 0x98, 0xf8, 0x88, 0x88, 0x70,
	0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x70, 0xf0, 0x38,
	0xf8, 0x88, 0x88, 0x88, 0x88, 0x88, 0xf0, 0x38, 0x00, 0x38, 0x10, 0x00,
	0x88, 0x88, 0x88, 0x44, 0x20, 0x88, 0x88, 0x88, 0x50, 0x88, 0x10, 0x20,
	0x40, 0x08, 0x28, 0x00, 0xf0, 0x88, 0xf0, 0x30, 0x20, 0x88, 0x88, 0xa8,
	0x20, 0x50, 0x20, 0x20, 0x20, 0x08, 0x44, 0x00, 0x80, 0xa8, 0xa0, 0x08,
	0x20, 0x88, 0x88, 0xa8, 0x50, 0x20, 0x40, 0x20, 0x10, 0x08, 0x00, 0x00,
	0x80, 0x90, 0x90, 0x44, 0x20, 0x88, 0x50, 0xa8, 0x88, 0x20, 0x80, 0x20,
	0x08, 0x08, 0x00, 0x00, 0x80, 0x68, 0x88, 0x38, 0x20, 0x70, 0x20, 0x50,
	0x88, 0x20, 0xf0, 0x20, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x02, 0x38, 0x00, 0x7c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x80, 0x00, 0x10, 0x00, 0x70, 0x00,
	0x80, 0x40, 0x20, 0x80, 0x20, 0x00, 0x00, 0x00, 0x60, 0x60, 0x80, 0x60,
	0x70, 0x60, 0x40, 0x70, 0xe0, 0x00, 0x00, 0x90, 0x20, 0xf0, 0xe0, 0x60,
	0xc0, 0x10, 0xe0, 0x90, 0x90, 0x90, 0xf0, 0x90, 0x90, 0x40, 0x20, 0xa0,
	0x20, 0xa8, 0x90, 0x90, 0x00, 0x70, 0x90, 0x80, 0x90, 0xf0, 0x40, 0x90,
	0x90, 0x40, 0x20, 0xc0, 0x20, 0xa8, 0x90, 0x90, 0x00, 0x90, 0x90, 0x90,
	0x90, 0x80, 0x40, 0x70, 0x90, 0x40, 0x20, 0xa0, 0x20, 0x88, 0x90, 0x90,
	0x00, 0x70, 0xe0, 0x60, 0x70, 0x60, 0x40, 0x10, 0x90, 0x40, 0xe0, 0x90,
	0x20, 0x88, 0x90, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
	0x10, 0x60, 0x64, 0x00, 0xe0, 0x70, 0xb0, 0x70, 0xf0, 0x90, 0x88, 0x88,
	0x88, 0x90, 0xf0, 0x20, 0x10, 0x10, 0x98, 0x00, 0x90, 0x90, 0xc0, 0x80,
	0x40, 0x90, 0x88, 0xa8, 0x50, 0x90, 0x10, 0x20, 0x10, 0x10, 0x00, 0x18,
	0x90, 0x90, 0x80, 0x60, 0x40, 0x90, 0x50, 0xa8, 0x20, 0x90, 0x60, 0x40,
	0x00, 0x08, 0x00, 0x20, 0xe0, 0x70, 0x80, 0x10, 0x50, 0x90, 0x50, 0x50,
	0x50, 0x70, 0x80, 0x20, 0x10, 0x10, 0x00, 0x7e, 0x80, 0x10, 0x80, 0xe0,
	0x20, 0x70, 0x20, 0x50, 0x88, 0x10, 0xf0, 0x20, 0x10, 0x10, 0x00, 0x20,
	0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x18,
	0x10, 0x60, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static mu_Context* ctx;

static void SetClip(mu_ClipCommand clip)
{
	IWindowSurface* surface = I_GetWindow()->getPrimarySurface();
	uint8_t* buffer = surface->getBuffer();
}

static void RenderRect(mu_RectCommand rect)
{
	IWindowSurface* surface = I_GetWindow()->getPrimarySurface();
	for (int yoff = 0; yoff < rect.rect.h; yoff++)
	{
		for (int xoff = 0; xoff < rect.rect.w; xoff++)
		{
			uint8_t* dest = surface->getBuffer(rect.rect.x + xoff, rect.rect.y + yoff);
			dest[0] = rect.color.b;
			dest[1] = rect.color.g;
			dest[2] = rect.color.r;
		}
	}
}

static void RenderText(mu_TextCommand text)
{
	int tx = text.pos.x;
	int ty = text.pos.y;

	IWindowSurface* surface = I_GetWindow()->getPrimarySurface();

	for (const char* p = text.str; *p != '\0'; p++)
	{
		if ((*p & 0xc0) == 0x80)
			continue;

		// Figure out our starting points.
		char idx = *p - ' ';
		tx += ODAFONT_WIDTH;
	}
}

static void RenderIcon(mu_IconCommand icon)
{

}

static int TextWidth(mu_Font font, const char* text, int len)
{
	if (len == -1)
		len = strlen(text);

	return len * ODAFONT_WIDTH;
}

static int TextHeight(mu_Font font)
{
	return ODAFONT_HEIGHT;
}

void I_InitGUI()
{
	if (::ctx != NULL)
		return;

	::ctx = new mu_Context;
	mu_init(::ctx);
	::ctx->text_width = TextWidth;
	::ctx->text_height = TextHeight;

	// Load the font.
	PBMData font;
	PNMScanner sc = PNMScanner(ODAFONT_pbm, ARRAY_LENGTH(ODAFONT_pbm));
	if (!V_ReadPBM(sc, font))
		return;

	// TODO: Add to texture atlas.
}

void I_QuitGUI()
{
	delete ::ctx;
	::ctx = NULL;
}

void I_DrawGUI()
{
	mu_Command* cmd = NULL;
	while (mu_next_command(::ctx, &cmd))
	{
		if (cmd->type == MU_COMMAND_CLIP)
			SetClip(cmd->clip);
		if (cmd->type == MU_COMMAND_RECT)
			RenderRect(cmd->rect);
		if (cmd->type == MU_COMMAND_TEXT)
			RenderText(cmd->text);
		if (cmd->type == MU_COMMAND_ICON)
			RenderIcon(cmd->icon);
	}
}

void UI_SelectIWAD()
{
	mu_begin(::ctx);
	if (mu_begin_window(::ctx, "My Window", mu_rect(10, 10, 140, 86))) {
		const int rowwidth[] = { 60, -1 };
		mu_layout_row(::ctx, 2, rowwidth, 0);

		mu_label(::ctx, "First:");
		if (mu_button(::ctx, "Button1"))
			printf("Button1 pressed\n");

		mu_label(::ctx, "Second:");
		if (mu_button(::ctx, "Button2"))
			mu_open_popup(::ctx, "My Popup");

		if (mu_begin_popup(::ctx, "My Popup"))
		{
			mu_label(::ctx, "Hello world!");
			mu_end_popup(::ctx);
		}

		mu_end_window(::ctx);
	}
	mu_end(::ctx);
}

static void DebugPBMByte(uint8_t c)
{
	for (size_t i = 0; i < 8; i++)
	{
		if (c & 0x80)
			printf("#");
		else
			printf(".");
		c <<= 1;
	}
}
